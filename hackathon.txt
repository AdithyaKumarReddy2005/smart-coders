import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error 
import numpy as np
data = {
    'gpa': np.random.uniform( 2.0, 4.0, 1000).round(1),
    'core_course_avg': np.random.randint(60, 100, 1000),
    'hackathons_participated': np.random.randint(0, 10, 1000),
    'papers_presented': np.random.randint(0, 5, 1000),
    'teacher_feedback': np.random.randint(1, 6, 1000),
    'target_score': np.random.randint(60,100,1000),
}
df = pd.DataFrame(data)

# Features and target
X = df.drop('target_score', axis=1)
y = df['target_score']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predicting scores for the test set
y_pred = model.predict(X_test)

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Ranking students based on predicted scores
df['predicted_score'] = model.predict(X)
top_students = df.nlargest(3, 'predicted_score')
print("Top Performing Students:")
print(top_students[['gpa', 'core_course_avg', 'hackathons_participated', 'papers_presented', 'teacher_feedback', 'predicted_score']])